name: Deploy to AWS ECS

on:
  push:
    branches:
      - main  # Trigger deployment on push to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # enable docker - container driver
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver: docker-container
          buildkitd-flags: --allow-insecure-entitlement network.host


      # Step 2: Set up AWS credentials and region
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}  # Specify region here

      # Step 3: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      # emulate target arch
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all


      # Build and push Docker image to Amazon ECR
      - name: Build and push Docker image
        run: |
          # Set image tag and ECR repository name
          IMAGE_TAG=flask-container
          REPOSITORY_URI=863518450753.dkr.ecr.us-east-1.amazonaws.com/flask-container          

          # Build the Docker image          
          docker buildx build \
            --platform linux/amd64 \
            -t $REPOSITORY_URI:$IMAGE_TAG \
            --push . 

      # Deploy to Lightsail
      - name: Deploy to Lightsail
        run: |
          # Define deployment file and container name
          CONTAINER_NAME=flask
          CONTAINER_IMAGE=863518450753.dkr.ecr.us-east-1.amazonaws.com/flask-container:latest
          SERVICE_NAME=flask-service

          # Create Lightsail container service deployment
          aws lightsail create-container-service-deployment \
            --service-name $SERVICE_NAME \
            --containers "{\"$CONTAINER_NAME\": {\"image\": \"$CONTAINER_IMAGE\", \"ports\": {\"80\": \"HTTP\"}}}" \
            --public-endpoint "{\"containerName\": \"$CONTAINER_NAME\", \"containerPort\": 80}"